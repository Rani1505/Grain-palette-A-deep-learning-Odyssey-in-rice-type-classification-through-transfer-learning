import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Data augmentation
datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

train_gen = datagen.flow_from_directory(
    'Training/data', target_size=(224,224), batch_size=32, subset='training'
)
val_gen = datagen.flow_from_directory(
    'Training/data', target_size=(224,224), batch_size=32, subset='validation'
)

# Transfer Learning model
base = tf.keras.applications.MobileNetV2(
    input_shape=(224,224,3), include_top=False, weights='imagenet'
)
base.trainable = False

model = models.Sequential([
    base,
    layers.GlobalAveragePooling2D(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.3),
    layers.Dense(5, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Callbacks
callbacks = [
    tf.keras.callbacks.EarlyStopping(patience=5, restore_best_weights=True),
    tf.keras.callbacks.ModelCheckpoint('best_model.h5', save_best_only=True)
]

history = model.fit(train_gen, validation_data=val_gen, epochs=20, callbacks=callbacks)
from flask import Flask, request, render_template
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np

app = Flask(__name__)
model = load_model('best_model.h5')
classes = ['Arborio', 'Basmati', 'Ipsala', 'Jasmine', 'Karacadag']

@app.route('/', methods=['GET','POST'])
def home():
    if request.method == 'POST':
        f = request.files['file']
        img = load_img(f, target_size=(224,224))
        arr = img_to_array(img)/255.0
        pred = model.predict(np.expand_dims(arr, axis=0))[0]
        idx = np.argmax(pred)
        return render_template('result.html', label=classes[idx], confidence=pred[idx])
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
